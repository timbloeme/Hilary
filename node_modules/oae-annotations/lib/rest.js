var OAE = require('oae-util/lib/oae');
var Cassandra = require('oae-util/lib/cassandra');
var Shortid = require('shortid');


// A handshake used by the annotator to confirm everything is up an running
OAE.tenantServer.get('/api/annotations', function(req, response){
    response.send(200, {"name": "Annotator Store API",  "version": "2.0.0"});
});


// Return all annotations wich can be found on a specific page
OAE.tenantServer.get('/api/annotations/:revisionId/:page', function(req, response){
    // Create a int holding the page number so we can manipulate it numericly
    var page = parseInt(req.params.page, 10);
    var nextPage = page+1;
    /**
     * Query cassandra for all the annotations that are on the page. By
     * asking it to return all the annotations who's id begins with 
     * the current page.
     */ 
    Cassandra.runQuery('SELECT ? .. ? FROM Annotations WHERE revisionId = ?', [page.toString(), nextPage.toString(),req.params.revisionId], function(err, rows){
        if (err) {
            return response.send(err.code, err.msg);
        } else if (rows[0].count <= 0) {
            return response.send(200, []);
        }
        /**
         * Cassasandra gives a object wich is not completly compatible with 
         * annotator so we need to clean it up a bit.
         */
        response.json(200, parseJson(rows[0]));
    });
});


// req a specific annotation form the server
OAE.tenantServer.get('/api/annotations/:revisionId/:page/:annotationId', function(req, response){
    Cassandra.runQuery('SELECT ? FROM Annotations WHERE revisionId = ?', [req.params.annotationId, req.params.revisionId], function(err, rows){
        if (err) {
            return response.send(err.code, err.msg);
        } else if (rows[0].count <= 0) {
            return response.send(200, []);
        }
        // We need to clean up the response from cassandra a bit
        response.send(200, JSON.parse(rows[0][0].value));
    });
});

// Create a new annotation
OAE.tenantServer.post('/api/annotations/:revisionId/:page', function(req, response){
    // Generate the newId and append it to the data we already have
    var data = req.body;
    data.id = req.params.page + '_' + Shortid.generate();
    data.userId = req.ctx.user.id;
    Cassandra.runQuery('UPDATE Annotations SET ? = ? WHERE revisionId = ?', [data.id, JSON.stringify(data), req.params.revisionId], function(err){
        if (err) {
            return response.send(err.code, err.msg);
        }
        // Annotator asks for a 303 with a link to the location of the annotation
        response.setHeader('Location', '/api/annotations/' + req.params.revisionId + '/' + req.params.page + '/' + newId);
        response.send(303);
    });
});


// Update a annotation
OAE.tenantServer.put('/api/annotations/:revisionId/:page/:annotationId', function(req, response){
    // The annotator does not send along the ID in its object so we need to re-append that
    var data = req.body;
    data.id = req.params.annotationId;
    data.userID = req.ctx.user.id;
    Cassandra.runQuery('UPDATE Annotations SET ? = ? WHERE revisionId = ? ',[req.params.annotationId, JSON.stringify(data), req.params.revisionId],function(err){
        if (err) {
            console.log('ERROR');
            return response.send(err.code, err.msg);
        }
        // Annotator asks for a 303 with a link to the location of the annotation
        response.setHeader('Location', '/api/annotations/' + req.params.revisionId + '/' + req.params.page + '/' + req.params.annotationId);
        response.send(303);
    });    
});

// Delete a annotation
OAE.tenantServer.delete('/api/annotations/:revisionId/:annotationId', function(req, response){
    Cassandra.runQuery('DELETE ? FROM Annotations WHERE revisionId = ? ',[req.params.annotationId, req.params.revisionId],function(err){
        if (err) {
            return response.send(err.code, err.msg);
        }
    });
    response.send(204);        
});

// Strip the un needed information from a string before creating a JSON object from it
var parseJson = function(data){
    var output = [];
    for (i = 0; i < data.length; i ++){
        output[i] = JSON.parse(data[i].value);
    }
    return output;
}
